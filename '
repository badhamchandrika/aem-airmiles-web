@Library('jenkins-shared-lib-v2') _
import io.jenkins.plugins.adobe.cloudmanager.action.CloudManagerBuildAction;

//def BRANCH = scm.branches[0].name.split("/")[-1] // use functionality for hotfix later

//before final merge change mutex name to airmiles-ci and so on
def aem_stages = [
    ci:           [adobePipelineId: '9236774',       mutex: 'aem-airmiles-web-ci',   deployStageName: 'RUN Code Quality',                             versionStageName: 'Create Pre-Release Tag or Get Input Tag'],
    dev:          [adobePipelineId: '7479542',       mutex: 'aem-airmiles-web-dev',  deployStageName: 'Deploy To Dev',                      versionStageName: 'Get Input Tag'],
    qa:           [adobePipelineId: '9454786',       mutex: 'aem-airmiles-web-qa',   deployStageName: 'Deploy To QA',                       versionStageName: 'Get Input Tag'],
    staging: [adobePipelineId: '9236774',       mutex: 'aem-airmiels-web-prod', deployStageName: 'Deploy To Staging/Prod Environment', versionStageName: 'Get Input Release Tag']
    //staging_prod: [adobePipelineId: 'UNIMPLEMENTED', mutex: 'aem-airmiels-web-prod', deployStageName: 'Deploy To Staging/Prod Environment', versionStageName: 'Get Input Release Tag']
]
def adobePipelineId = aem_stages[DEPLOYMENT_ENV]["adobePipelineId"]
def deploymentStageName = aem_stages[DEPLOYMENT_ENV]["deployStageName"]
def versionStageName = aem_stages[DEPLOYMENT_ENV]["versionStageName"]
def mutex = aem_stages[DEPLOYMENT_ENV]["mutex"]
def isDeployable = false
def releaseVersion = null;
def isNewRelease = true;

pipeline {
  agent { label 'aws-ec2' }

  stages {
    stage('L1 SonarQube Scan') {
        when {
            expression { DEPLOYMENT_ENV == 'ci' }
        }
       steps {
           print "Pending Approval..."
       }
    }

    stage('L1 Checkmarx Scan') {
        when {
            expression { DEPLOYMENT_ENV == 'ci' }
        }
        steps {
            print "Pending Approval..."
        }
    }

    stage ("Get Input Version Tag") {
        steps {
            script {
                // Jenkins Tagged Parameter Wasn't Selected -- Implies Fully Automated Flow
                if (params.RELEASE_VERSION == '' || params.RELEASE_VERSION == null){
                    def pkgJson = readJSON file: 'package.json'
                    releaseVersion = "pre_" + pkgJson.version + "_" + new Date().format('yyyyMMddHHmmss').toString()
                    withCredentials([string(credentialsId: 'github-personal-access-token-jenkins', variable: 'GH_TOKEN')]) {
                        sh """
                            git config --global --add safe.directory ${WORKSPACE}
                        """
                    }
                    gitUtils.pushTag(releaseVersion)


                // Jenkins Tagged Parameter Was Selected -- Can be used to deploy to environments
                } else {
                    //releaseVersion = taggedVersion
                    releaseVersion = params.RELEASE_VERSION
                    println "Using Existing Release Version -- " + releaseVersion
                }
            }
        }
    }

    stage('Wait In Global Code Quality Queue') {
        agent {
            dockerfile {
                label 'aws-ec2'
                dir 'jenkins'
                filename 'Jenkins_To_Adobe_Dockerfile'
                args '-u root:root'
            }
        }
        when {
            expression { releaseVersion != null }
        }
        steps {
            script {
                def clientSecret='None', sslPrivateKey='None'
                awsUtils.withDeployer('nonprod', 'amrpint') {
                   clientSecret = sh(returnStdout: true, script:"aws secretsmanager get-secret-value --secret-id adobe-ats-client-secret --query SecretString --output text --region us-east-1").trim()
                   sslPrivateKey = sh(returnStdout: true, script:"aws secretsmanager get-secret-value --secret-id adobe-ats-ssl-private-key --query SecretString --output text --region us-east-1").trim()
                }
                def aioConfig = """{
                    \\"client_id\\": \\"1af8be6b37174a53926c5190167312ab\\",
                    \\"client_secret\\": \\"${clientSecret}\\",
                    \\"technical_account_id\\": \\"DB6B1E226286AB510A495CC8@techacct.adobe.com\\",
                    \\"ims_org_id\\": \\"6A3DF65A5832D31C0A495C35@AdobeOrg\\",
                    \\"meta_scopes\\": [
                      \\"ent_cloudmgr_sdk\\"
                    ]
                }"""

                sh """
                    set +x
                    echo "${aioConfig}" > config.json
                    echo "${sslPrivateKey}" > adobe_ats_team_private.key
                    set -x
                    aio config:set ims.contexts.aio-cli-plugin-cloudmanager config.json --file --json
                    aio config:set ims.contexts.aio-cli-plugin-cloudmanager.private_key adobe_ats_team_private.key --file
                """
                // Wait in a global Jenkins ci build queue. Only one Jenkins pipeline execution build, regardless of the number of pipelines, can sync to Adobe Github & execute the Code Quality Pipeline
                // Name the mutex resource as the same name of the repository that has the master pom.xml. This way, future teams won't interrupt while deploying to the same environment
                lock(resource: mutex , variable: 'mutex') {

                    stage('Wait For Impropper/Manual Deployments To Complete'){
                         // Don't fail if a user improperly (manually) triggered a pipeline, which would bypass the mutex, wait for the AMS pipeline to be free to use instead
                         def currentStatus = sh(returnStdout: true, script:"""aio cloudmanager:pipeline:list-executions ${adobePipelineId} -p 2007 | head -3 | tail -1 | awk '{print \$8}'""").trim()
                         println "Current Adobe Pipeline Status: " + currentStatus
                         if (currentStatus == "RUNNING"){
                             println "Wait a minute! Someone either manually triggered a nonprod deployment pipeline or a Jenkins pipeline is not using a mutex to fairly wait in the deployment queue."
                             println "Waiting for unfair deployment to complete before proceeding..."
                         } else {
                             println "There are no cheaters budding the deployment queue..."
                             println "Proceeding..."
                         }
                         while(currentStatus == "RUNNING"){
                             sleep 30
                             currentStatus = sh(returnStdout: true, script:"aio cloudmanager:pipeline:list-executions ${adobePipelineId} -p 2007 | head -3 | tail -1 | awk '{print \$8}'").trim()
                         }

                    }

                    def preReleasePattern = /^pre_\d+\.\d+\.\d+_\d{14}$/
                    def releasePattern = /^\d+\.\d+\.\d+$/

                    if (DEPLOYMENT_ENV != 'staging') {
                            if (releaseVersion ==~ preReleasePattern) {
                                isDeployable = true
                            } else if (releaseVersion ==~ releasePattern){
                                isDeployable = true
                            }
                    } else {
                            //if (gitUtils.isReleasable()) {
                                if (releaseVersion == null) {
                                    isDeployable = false

                                } else if (releaseVersion ==~ preReleasePattern) {
                                    (releaseVersion, isNewRelease) = semanticRelease()
                                    if (isNewRelease) {
                                        isDeployable = true
                                    } else {
                                        println "GSMITH BAD PATTERN"
                                        //while (isNewRelease == false) {
                                        //    ask submitter to ammend final commit with the appropriate release syntax
                                        //    if approved {
                                        //        update commit message
                                        //        try to increment release
                                        //        if isNewRelease {
                                        //            isDeployable = true
                                        //        }
                                        //    } else {
                                        //        abort
                                        //    }
                                        //}
                                    }

                                } else if (releaseVersion ==~ releasePattern) {
                                    isDeployable = true
                                }
                            //}

                        }

                    if (isDeployable == true) {
                            stage('Sync L1 Github Branch to Adobe'){
                                 withCredentials([usernamePassword(credentialsId: 'adobe-gsmith-github-credentials', usernameVariable: 'adobe_git_user', passwordVariable: 'adobe_git_password')]) {

                                     sh """
                                         git config --global --add safe.directory ${WORKSPACE}

                                         if [ "\$( git remote | grep 'sync' )" != "sync" ]; then
                                             git remote add sync https://${adobe_git_user}:${adobe_git_password}@git.cloudmanager.adobe.com/loyaltyone/aem-airmiles-web/
                                         fi
                                         git checkout -b ${releaseVersion}
                                         git checkout -b ${DEPLOYMENT_ENV} || (git branch --delete ${DEPLOYMENT_ENV} && git checkout -b ${DEPLOYMENT_ENV})
                                         git push sync ${DEPLOYMENT_ENV}
                                     """
                                 }
                            }

                            stage("${deploymentStageName}") {
                                 // Don't fail if a user improperly (manually) triggered a pipeline, which would bypass the mutex, wait for the AMS pipeline to be free to use instead
                                 def waiting = true
                                 while(waiting){
                                     try {
                                         sh """
                                             aio cloudmanager:pipeline:update ${adobePipelineId} -p 2007 --branch=${DEPLOYMENT_ENV} --repositoryId=58628
                                         """
                                         acmStartPipeline(
                                             aioProject: 'L1 Jenkins and AMS Cloud Manager Integration',
                                             program: '2007',
                                             pipeline:"${adobePipelineId}"
                                         )
                                         acmPollPipeline(
                                             recurrencePeriod: 30000,
                                             quiet: true
                                         )
                                         waiting = false
                                         getAdobePipelineStatus(adobePipelineId)
                                     } catch (Exception e) {
                                         getAdobePipelineStatus(adobePipelineId)
                                     }
                                 }
                            }

                            if (DEPLOYMENT_ENV == 'qa') {
                                stage('Allow Others To Deploy To QA') {
                                    input(
                                        message: 'Are you finished with the QA environment?',
                                        submitter: "OS-AWS-JenkinsDeveloper",
                                        ok: 'QA is approved!'
                                    )
                                }
                            }
                    } else {
                            println "debug releaseVersion: " + releaseVersion
                            println "debug environment: " + DEPLOYMENT_ENV
                            println "debug isNewRelease: " + isNewRelease
                            error("Didn't Deploy Anything")
                    }
                }

            }
        }
        post {
            cleanup {
                sh """
                    set +x
                    git push sync --delete ${DEPLOYMENT_ENV} || echo ""
                    git remote remove sync || echo ""
                    set -x
                """
            }
        }
    }
    // ADD release stage
  }
  post {
    cleanup {
      deleteDir()
      dir("${workspace}@tmp") {
        deleteDir()
      }
      dir("${workspace}@script") {
        deleteDir()
      }
    }
    success {
        script {
            if (DEPLOYMENT_ENV == 'ci') {
                build job:'aem-airmiles-web/temp/cd-dev', parameters: [
                    string(name: 'DEPLOYMENT_ENV', value: 'dev'),
                    string(name: 'RELEASE_VERSION', value: releaseVersion),
                ],
                wait: false
            }
            //println "Stop Here For Now"
        }
    }
  }
}

def getAdobePipelineStatus(String adobePipelineId){
    // Check Status Of Executed Pipeline
    status = sh(returnStdout: true, script:"""aio cloudmanager:pipeline:list-executions ${adobePipelineId} -p 2007 | head -3 | tail -1 | awk '{print \$8}'""").trim()
    println "The Pipeline STATUS is '${status}'"
    if (status == 'FAILED'){
        error "Jenkins_Code_Quality_Pipeline failed, please read logs in Adobe Cloud Manager..."
    } else if (status == 'CANCELLED'){
        error "Jenkins_Code_Quality_Pipeline was cancelled"
    } else {
        // pipeline is busy, wait
        sleep 30
    }
}

def semanticRelease(){
// Release a new version to be deployed to the staging environment
    def releaseVersion, isNewRelease = false
    println "Attempting to retrieve release version..."
    //(releaseVersion, isNewRelease) = releaseUtils.semanticRelease()
    def pkgJson = readJSON file: 'package.json'
    oldReleaseVersion = pkgJson.version
    withCredentials([string(credentialsId: 'github-personal-access-token-jenkins', variable: 'GH_TOKEN')]) {
        sh """
            git config --global --add safe.directory ${WORKSPACE}
            npm run release
        """
    }
    pkgJson = readJSON file: 'package.json'
    releaseVersion = pkgJson.version
    if (oldReleaseVersion != releaseVersion) {
      isNewRelease = true
      println "TAGGED SEMANTIC VERSION --> " + releaseVersion
      return [releaseVersion, isNewRelease]
    } else {
        println "NO NEW RELEASES TO PUBLISH"
        return [null, isNewRelease]
    }
}
